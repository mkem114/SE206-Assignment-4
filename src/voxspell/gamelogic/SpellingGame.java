package voxspell.gamelogic;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import voxspell.inputoutput.WordListReader;

/**
 * <h1>SpellingGame</h1> Represents a spelling game in it's entirety; the level,
 * the words to be quizzed, all the quizzes and the history
 * <p>
 * Implements serialisable so that it can be so that the entire game state can
 * be reloaded on next play if wished
 * 
 * @version 1.0
 * @author mkem114 (primary)
 * @author tkro003 (secondary)
 * @since 2016-09-18
 */
public class SpellingGame implements Serializable {
	/**
	 * The serialising ID generated by eclipse
	 */
	private static final long serialVersionUID = 6852462088113077931L;
	public static final int numLevels = 11;
	private SpellingLevel _currentLevel;
	private List<SpellingLevel> _levels;

	/**
	 * Starts a new spelling game based on a filename for a file contains the
	 * words to be loaded and the level that the player wants to start on
	 * 
	 * @param wordlist
	 *            Words to play with
	 * @param startingLevel
	 *            Level to start on
	 */
	public SpellingGame(String wordlist, int startingLevel) {
		_levels = new ArrayList<SpellingLevel>();

		for (int i = 1; i <= numLevels; i++) {
			_levels.add(new SpellingLevel(i, this));
		}

		try {
			new WordListReader(wordlist).addObserver(this).readWords();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		_currentLevel = _levels.get(startingLevel - 1);
	}

	/**
	 * Starts a new quiz for the player
	 * 
	 * @return Quiz being played
	 */
	public SpellingQuiz newQuiz() {
		return _currentLevel.newQuiz();
	}

	/**
	 * Starts a review quiz for the player
	 * 
	 * @return Quiz being played
	 */
	public SpellingQuiz reviewQuiz() {
		return _currentLevel.reviewQuiz();
	}

	/**
	 * Whether or not there is anything to review on a particular level
	 * 
	 * @param level
	 *            Level to check
	 * @return Whether it can be reviewed
	 */
	public boolean isReviewable(int level) {
		SpellingLevel lv = _levels.get(level - 1);
		for (QuizWord word : lv.words()) {
			if (word.toBeReviewed()) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Generates statistics for all words on all levels in the structure
	 * [level[word[word, mastered, faulted, failed]]]
	 * 
	 * @return Generated statistics
	 */
	public ArrayList<ArrayList<ArrayList<String>>> statistics() {
		ArrayList<ArrayList<ArrayList<String>>> stats = new ArrayList<ArrayList<ArrayList<String>>>();
		for (SpellingLevel level : _levels) {
			stats.add(level.statistics());
		}
		return stats;
		// TODO figure out how to get to List<<<<
	}

	/**
	 * Calculates the accuracy of a given level
	 * 
	 * @param level
	 *            Level to check accuracy of
	 * @return The accuracy as a percentage
	 */
	public int accuracy(int level) {
		return (int) _levels.get(level - 1).accuracy();
	}

	/**
	 * Add new words to the game using the indexes as relative level numbers
	 * 
	 * @param gamewords
	 *            The words to add as [level[word]]
	 */
	public void updateWords(List<List<String>> gamewords) {
		for (int i = 0; i < numLevels; i++) {
			List<String> levelwords = gamewords.get(i);
			for (String word : levelwords) {
				_levels.get(i).addWord(word);
			}
		}
	}

	/**
	 * Promotes the user to the next level in the game
	 */
	public void levelUp() {
		if (_currentLevel.levelNum() < numLevels) {
			_currentLevel = _levels.get(_currentLevel.levelNum());
		}
	}

	/**
	 * The level object associated with the level number
	 * 
	 * @param level
	 *            Level number
	 * @return Level object
	 */
	public SpellingLevel getLevel(int level) {
		return _levels.get(level - 1);
	}
}
